import java.util.*;

public class TernarySearchTreeAutocomplete implements Autocomplete {
    private Node overallRoot;

    public TernarySearchTreeAutocomplete() {
        overallRoot = null;
    }

    public void addAll(Collection<? extends CharSequence> terms) {
        // TODO: Your code here
        if (terms == null) {
            throw new NullPointerException("calls addAll() with null collection");
        }
        for (CharSequence term : terms) {
            if (term == null) {
                throw new NullPointerException("null term in the given collection");
            }
            if (!get(term)) {
                overallRoot = addAll(overallRoot, term, 0);
            }
        }
        
    }

    private Node addAll(Node root, CharSequence term, int d) {
        char c = term.charAt(d);
        if (root == null) {
            root = new Node(c, false);
        }
        if      (c < root.data)         root.left   = addAll(root.left, term, d);
        else if (c > root.data)         root.right  = addAll(root.right, term, d);
        else if (d < term.length() - 1) root.mid    = addAll(root.mid, term, d + 1);
        else                            root.isTerm = true;
        return root;
    }

    public List<CharSequence> allMatches(CharSequence prefix) {
        List<CharSequence> result = new ArrayList<>();
        // TODO: Your code here
        if (prefix == null || prefix.length() == 0) {
            return result;
        }
        Node subtree = get(overallRoot, prefix, 0);
        if (subtree == null) return result;
        if (subtree.isTerm)  result.add(prefix);
        collect(subtree.mid, new StringBuilder(prefix), result);
        return result;
    }

    private boolean get(CharSequence term) {
        if (term == null) {
            throw new NullPointerException("calls get() with null term");
        } else if (term.length() == 0) {
            throw new IllegalArgumentException("term must have length >= 1");
        }
        Node temp = get(overallRoot, term, 0);
        if (temp == null) return false;
        return temp.isTerm;
    }

    // Returns subtree corresponding to given term
    private Node get(Node root, CharSequence term, int d) {
        if(root == null) {
            return null;
        }
        char c = term.charAt(d);
        if      (c < root.data)           return get(root.left, term, d);
        else if (c > root.data)           return get(root.right, term, d);
        else if (d < term.length() - 1) return get(root.mid, term, d + 1);
        else                              return root;
    }

    // collects all terms in subtree rooted at root with the given prefix
    private void collect(Node root, StringBuilder prefix, List<CharSequence> list) {
        if (root == null) return;
        collect(root.left, prefix, list);
        if (root.isTerm) list.add(prefix.toString() + root.data);
        prefix.append(root.data);
        collect(root.mid, prefix, list);
        prefix.deleteCharAt(prefix.length() - 1);
        collect(root.right, prefix, list);
    }

    private static class Node {
        public char data;
        public boolean isTerm;
        public Node left, mid, right;

        public Node(char data, boolean isTerm) {
            this.data = data;
            this.isTerm = isTerm;
            this.left = null;
            this.mid = null;
            this.right = null;
        }
    }
}
